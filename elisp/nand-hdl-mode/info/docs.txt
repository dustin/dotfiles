(("Not16" . "16-bit Not gate: for i = 0..15: out[i] = not in[i]")("Or16" . "16-bit bitwise Or gate: for i = 0..15 out[i] = a[i] or b[i].")("DMux" . " Dmultiplexor.  
  {a,b} = {in,0} if sel == 0
          {0,in} if sel == 1")("RAM8" . "Memory of 8 registers, each 16-bit wide.  
  The chip facilitates read and write operations, as follows:
      Read:  out(t) = RAM8[address(t)](t)
      Write: If load(t-1) then RAM8[address(t-1)](t) = in(t-1)
  In words: the chip always outputs the value stored at the memory 
  location specified by address. If load == 1, the in value is loaded 
  into the memory location specified by address.  This value becomes 
  available through the out output starting from the next time step.")("ROM32K" . "Read-Only memory (ROM) of 16K registers, each 16-bit wide.
  The chip is designed to facilitate data read, as follows:
      out(t) = ROM32K[address(t)](t)
  In words: the chip always outputs the value stored at the 
  memory location specified by address.
 
  The built-in chip implementation has a GUI side-effect, 
  showing an array-like component that displays the ROM's 
  contents. The ROM32K chip is supposed to be pre-loaded with 
  a machine language program. To that end, the built-in chip
  implementation also knows how to handle the \"ROM32K load Xxx\"
  script command, where Xxx is the name of a text file containing 
  a program written in the Hack machine language.  When the 
  simulator encounters such a command in a test script, the code 
  found in the file is loaded into the simulated ROM32K unit.")("PC" . "16-bit counter with load and reset controls.
 
  If reset(t-1) then out(t) = 0
     else if load(t-1) then out(t) = in(t-1)
          else if inc(t-1) then out(t) = out(t-1) + 1 (integer addition)
               else out(t) = out(t-1)")("Or" . "Or gate: out = 1 if {a == 1 or b == 1}, 0 otherwise  ")("HalfAdder" . "Half adder. Computes sum, the least significnat bit of a + b,
  and carry, the most significnat bit of a + b.")("RAM64" . "Memory of 64 registers, each 16-bit wide.  
  The chip facilitates read and write operations, as follows:
      Read:  out(t) = RAM64[address(t)](t)
      Write: If load(t-1) then RAM64[address(t-1)](t) = in(t-1)
  In words: the chip always outputs the value stored at the memory 
  location specified by address. If load == 1, the in value is loaded 
  into the memory location specified by address.  This value becomes 
  available through the out output starting from the next time step.")("Keyboard" . "The keyboard (memory map).
  Outputs the code of the currently pressed key.
 
  The built-in chip implementation has two side effects supplied 
  by the simulator. First, the keyboard memory map is continuously 
  being refreshed from the physical keyboard unit. Second, it 
  displays a keyboard icon and data entry GUI.")("Register" . "16-Bit register. 
  If load[t-1]=1 then out[t] = in[t-1]
  else out does not change (out[t] = out[t-1])")("DMux4Way" . " 4-way demultiplexor.  
  {a,b,c,d} = {in,0,0,0} if sel == 00
              {0,in,0,0} if sel == 01
              {0,0,in,0} if sel == 10
              {0,0,0,in} if sel == 11")("ARegister" . "A 16-Bit register called \"A Register\". 
  If load[t-1]=1 then out[t] = in[t-1]
  else out does not change (out[t] = out[t-1])
 
  This built-in chip implementation has the side effect of 
  providing a GUI representation of a 16-bit register
  called \"A register\" (typically used to store an address).")("Xor" . " Exclusive-or gate: out = !(a == b).")("Add16")("DFF" . "Data Flip-flop: out(t) = in(t-1) 
  where t is the current time unit, or clock cycle.")("DRegister" . "A 16-Bit register called \"D Register\". 
  If load[t-1]=1 then out[t] = in[t-1]
  else out does not change (out[t] = out[t-1])
 
  This built-in chip implementation has the side effect of 
  providing a GUI representation of a 16-bit register
  called \"D register\" (typically used to store data).")("And" . "And gate: out = 1 if {a == 1 and b == 1}, 0 otherwise  ")("DMux8Way" . " 8-way demultiplexor.  
  {a,b,c,d,e,f,g,h} = {in,0,0,0,0,0,0,0} if sel == 000
                      {0,in,0,0,0,0,0,0} if sel == 001
                      etc.
                      {0,0,0,0,0,0,0,in} if sel == 111")("RAM16K" . "Memory of 16K registers, each 16-bit wide.  
  The chip facilitates read and write operations, as follows:
      Read:  out(t) = RAM16K[address(t)](t)
      Write: If load(t-1) then RAM16K[address(t-1)](t) = in(t-1)
  In words: the chip always outputs the value stored at the memory 
  location specified by address. If load=1, the in value is loaded 
  into the memory location specified by address.  This value becomes 
  available through the out output starting from the next time step.")("And16" . "16-bit-wise And gate: for i = 0..15: out[i] = a[i] and b[i]")("Or8Way" . "8-way Or gate: out = in[0] or in[1] or ... or in[7].")("Not" . "Not gate: out = not in ")("RAM512" . "Memory of 512 registers, each 16-bit wide.  
  The chip facilitates read and write operations, as follows:
      Read:  out(t) = RAM512[address(t)](t)
      Write: If load(t-1) then RAM512[address(t-1)](t) = in(t-1)
  In words: the chip always outputs the value stored at the memory 
  location specified by address. If load == 1, the in value is loaded 
  into the memory location specified by address.  This value becomes 
  available through the out output starting from the next time step.")("RAM4K" . "Memory of 4K registers, each 16-bit wide.  
  The chip facilitates read and write operations, as follows:
      Read:  out(t) = RAM4K[address(t)](t)
      Write: If load(t-1) then RAM4K[address(t-1)](t) = in(t-1)
  In words: the chip always outputs the value stored at the memory 
  location specified by address. If load == 1, the in value is loaded 
  into the memory location specified by address.  This value becomes 
  available through the out output starting from the next time step.")("Inc16" . "16-bit incrementer.  out = in + 1 (16-bit addition).
  Overflow is neither detected nor handled.")("FullAdder" . "Full adder. Computes sum, the least significant bit of 
  a + b + c, and carry, the most significant bit of a + b + c.")("Mux" . " Multiplexor. If sel == 1 then out = b else out = a.")("ALU" . "The ALU. Computes one of the following functions:
  x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
  x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
  Which function to compute is determined by 6 input bits 
  denoted zx, nx, zy, ny, f, no.
  The computed function's value is called \"out\".
  In addition to computing out, the ALU computes two 
  1-bit outputs called zr and ng:
  if out == 0, zr = 1; otherwise zr = 0;
  If out < 0, ng = 1; otherwise ng = 0.
  The 6-bit combinations (zx,nx,zy,ny,f,no) and 
  their effect are documented in the book. ")("Screen" . "The Screen (memory map).
  Functions exactly like a 16-bit 8K RAM:
     1. out(t)=Screen[address(t)](t)
     2. If load(t-1) then Screen[address(t-1)](t)=in(t-1)
 
  The built-in chip implementation has the side effect of continuously 
  refreshing a visual 256 by 512 black-and-white screen, simulated 
  by the simulator. Each row in the visual screen is represented 
  by 32 consecutive 16-bit words, starting at the top left corner 
  of the visual screen. Thus the pixel at row r from the top and 
  column c from the left (0<=r<=255, 0<=c<=511) reflects the c%16 
  bit (counting from LSB to MSB) of the word found in 
  Screen[r32+c/16]. ")("Mux8Way16" . " 8-way 16-bit multiplexor.  
  out = a if sel == 000
        b if sel == 001
        etc.
        h if sel == 111")("Mux16" . "16 bit multiplexor. If sel == 1 then out = b else out = a.")("Bit" . "1-bit register.
  If load[t] == 1 then out[t+1] = in[t]
                  else out[t+1] = out[t] (no change)")("Mux4Way16" . " 4-way 16-bit multiplexor.  
  out = a if sel == 00
        b if sel == 01
        c if sel == 10
        d if sel == 11")("Nand" . "Nand gate: out = a Nand b."))